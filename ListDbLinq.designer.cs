#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ListDB")]
public partial class ListDbLinqDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertText(Text instance);
  partial void UpdateText(Text instance);
  partial void DeleteText(Text instance);
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  #endregion
	
	public ListDbLinqDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ListDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ListDbLinqDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ListDbLinqDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ListDbLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ListDbLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Text> Texts
	{
		get
		{
			return this.GetTable<Text>();
		}
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdUser;
	
	private string _UserName;
	
	private string _Password;
	
	private string _Email;
	
	private EntitySet<Text> _Texts;
	
	private EntitySet<Category> _Categories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
	
	public User()
	{
		this._Texts = new EntitySet<Text>(new Action<Text>(this.attach_Texts), new Action<Text>(this.detach_Texts));
		this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdUser
	{
		get
		{
			return this._IdUser;
		}
		set
		{
			if ((this._IdUser != value))
			{
				this.OnIdUserChanging(value);
				this.SendPropertyChanging();
				this._IdUser = value;
				this.SendPropertyChanged("IdUser");
				this.OnIdUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Text", Storage="_Texts", ThisKey="IdUser", OtherKey="IdUser")]
	public EntitySet<Text> Texts
	{
		get
		{
			return this._Texts;
		}
		set
		{
			this._Texts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Category", Storage="_Categories", ThisKey="IdUser", OtherKey="IdUser")]
	public EntitySet<Category> Categories
	{
		get
		{
			return this._Categories;
		}
		set
		{
			this._Categories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Texts(Text entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Texts(Text entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Categories(Category entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Categories(Category entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Text")]
public partial class Text : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdText;
	
	private int _IdUser;
	
	private System.Nullable<int> _IdCategory;
	
	private string @__Task;
	
	private bool _Completed;
	
	private System.DateTime _Date;
	
	private EntityRef<User> _User;
	
	private EntityRef<Category> _Category;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTextChanging(int value);
    partial void OnIdTextChanged();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnIdCategoryChanging(System.Nullable<int> value);
    partial void OnIdCategoryChanged();
    partial void On_TaskChanging(string value);
    partial void On_TaskChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
	
	public Text()
	{
		this._User = default(EntityRef<User>);
		this._Category = default(EntityRef<Category>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdText", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdText
	{
		get
		{
			return this._IdText;
		}
		set
		{
			if ((this._IdText != value))
			{
				this.OnIdTextChanging(value);
				this.SendPropertyChanging();
				this._IdText = value;
				this.SendPropertyChanged("IdText");
				this.OnIdTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int NOT NULL")]
	public int IdUser
	{
		get
		{
			return this._IdUser;
		}
		set
		{
			if ((this._IdUser != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdUserChanging(value);
				this.SendPropertyChanging();
				this._IdUser = value;
				this.SendPropertyChanged("IdUser");
				this.OnIdUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", DbType="Int")]
	public System.Nullable<int> IdCategory
	{
		get
		{
			return this._IdCategory;
		}
		set
		{
			if ((this._IdCategory != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdCategoryChanging(value);
				this.SendPropertyChanging();
				this._IdCategory = value;
				this.SendPropertyChanged("IdCategory");
				this.OnIdCategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ Task]", Storage="__Task", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string _Task
	{
		get
		{
			return this.@__Task;
		}
		set
		{
			if ((this.@__Task != value))
			{
				this.On_TaskChanging(value);
				this.SendPropertyChanging();
				this.@__Task = value;
				this.SendPropertyChanged("_Task");
				this.On_TaskChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit NOT NULL")]
	public bool Completed
	{
		get
		{
			return this._Completed;
		}
		set
		{
			if ((this._Completed != value))
			{
				this.OnCompletedChanging(value);
				this.SendPropertyChanging();
				this._Completed = value;
				this.SendPropertyChanged("Completed");
				this.OnCompletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Text", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Texts.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Texts.Add(this);
					this._IdUser = value.IdUser;
				}
				else
				{
					this._IdUser = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Text", Storage="_Category", ThisKey="IdCategory", OtherKey="IdCategory", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.Texts.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.Texts.Add(this);
					this._IdCategory = value.IdCategory;
				}
				else
				{
					this._IdCategory = default(Nullable<int>);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdCategory;
	
	private string _CategoryName;
	
	private int _IdUser;
	
	private EntitySet<Text> _Texts;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryChanging(int value);
    partial void OnIdCategoryChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    #endregion
	
	public Category()
	{
		this._Texts = new EntitySet<Text>(new Action<Text>(this.attach_Texts), new Action<Text>(this.detach_Texts));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdCategory
	{
		get
		{
			return this._IdCategory;
		}
		set
		{
			if ((this._IdCategory != value))
			{
				this.OnIdCategoryChanging(value);
				this.SendPropertyChanging();
				this._IdCategory = value;
				this.SendPropertyChanged("IdCategory");
				this.OnIdCategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string CategoryName
	{
		get
		{
			return this._CategoryName;
		}
		set
		{
			if ((this._CategoryName != value))
			{
				this.OnCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._CategoryName = value;
				this.SendPropertyChanged("CategoryName");
				this.OnCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int NOT NULL")]
	public int IdUser
	{
		get
		{
			return this._IdUser;
		}
		set
		{
			if ((this._IdUser != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdUserChanging(value);
				this.SendPropertyChanging();
				this._IdUser = value;
				this.SendPropertyChanged("IdUser");
				this.OnIdUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Text", Storage="_Texts", ThisKey="IdCategory", OtherKey="IdCategory")]
	public EntitySet<Text> Texts
	{
		get
		{
			return this._Texts;
		}
		set
		{
			this._Texts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Category", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Categories.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Categories.Add(this);
					this._IdUser = value.IdUser;
				}
				else
				{
					this._IdUser = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Texts(Text entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_Texts(Text entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}
#pragma warning restore 1591
